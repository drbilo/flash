'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commands = undefined;

var _domTestingLibrary = require('dom-testing-library');

var _utils = require('./utils');

var getDefaultCommandOptions = function () {
  return {
    timeout: Cypress.config().defaultCommandTimeout
  };
};

var commands = Object.keys(_domTestingLibrary.queries).map(function (queryName) {
  return {
    name: queryName,
    command: function command() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var lastArg = args[args.length - 1];
      var defaults = getDefaultCommandOptions();
      var waitOptions = typeof lastArg === 'object' ? Object.assign({}, defaults, lastArg) : defaults;

      var queryImpl = _domTestingLibrary.queries[queryName];
      var baseCommandImpl = function (doc) {
        var container = (0, _utils.getContainer)(waitOptions.container || doc);
        return (0, _domTestingLibrary.waitForElement)(function () {
          return queryImpl.apply(undefined, [container].concat(args));
        }, Object.assign({}, waitOptions, {
          container
        }));
      };
      var commandImpl = void 0;
      if (queryName.startsWith('queryBy') || queryName.startsWith('queryAllBy')) {
        commandImpl = function (doc) {
          return baseCommandImpl(doc).catch(function () {
            return doc.querySelector('.___cypressNotExistingSelector');
          });
        };
      } else {
        commandImpl = function (doc) {
          return baseCommandImpl(doc);
        };
      }
      var thenHandler = new Function('commandImpl', `
            return function Command__${queryName}(thenArgs) {
              return commandImpl(thenArgs.document)
            }
          `)(commandImpl);
      return cy.window({ log: false }).then({ timeout: waitOptions.timeout + 100 }, thenHandler).then(function (subject) {
        Cypress.log({
          $el: subject,
          name: queryName,
          message: args.filter(function (value) {
            if (Array.isArray(value) && value.length === 0) {
              return false;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
              return false;
            }
            return Boolean(value);
          })
        });
        return subject;
      });
    }
  };
});

exports.commands = commands;

/* eslint no-new-func:0 */
/* globals Cypress, cy */