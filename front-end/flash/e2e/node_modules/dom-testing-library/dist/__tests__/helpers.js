"use strict";

var _helpers = require("../helpers");

describe('getDocument', () => {
  if (typeof document === 'undefined') {
    test('throws an error if window does not exist', () => {
      expect(() => (0, _helpers.getDocument)()).toThrowError(/Could not find default container/);
    });
  } else {
    test('returns global document if exists', () => {
      expect((0, _helpers.getDocument)()).toBe(document);
    });
  }
});

class DummyClass {
  constructor(args) {
    this.args = args;
  }

}

describe('newMutationObserver', () => {
  if (typeof window === 'undefined') {
    it('instantiates mock MutationObserver if not availble on window', () => {
      expect((0, _helpers.newMutationObserver)(() => {}).observe).toBeDefined();
    });
  } else {
    it('instantiates from global MutationObserver if available', () => {
      const oldMutationObserver = window.MutationObserver;
      window.MutationObserver = DummyClass;

      try {
        expect((0, _helpers.newMutationObserver)('foobar').args).toEqual('foobar');
      } finally {
        window.MutationObserver = oldMutationObserver;
      }
    });
  }
});