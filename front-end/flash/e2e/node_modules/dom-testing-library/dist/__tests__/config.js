"use strict";

var _config = require("../config");

describe('configuration API', () => {
  let originalConfig;
  beforeEach(() => {
    // Grab the existing configuration so we can restore
    // it at the end of the test
    (0, _config.configure)(existingConfig => {
      originalConfig = existingConfig; // Don't change the existing config

      return {};
    });
  });
  afterEach(() => {
    (0, _config.configure)(originalConfig);
  });
  beforeEach(() => {
    (0, _config.configure)({
      other: 123
    });
  });
  describe('getConfig', () => {
    test('returns existing configuration', () => {
      const conf = (0, _config.getConfig)();
      expect(conf.testIdAttribute).toEqual('data-testid');
    });
  });
  describe('configure', () => {
    test('merges a delta rather than replacing the whole config', () => {
      const conf = (0, _config.getConfig)();
      expect(conf).toMatchObject({
        testIdAttribute: 'data-testid'
      });
    });
    test('overrides existing values', () => {
      (0, _config.configure)({
        testIdAttribute: 'new-id'
      });
      const conf = (0, _config.getConfig)();
      expect(conf.testIdAttribute).toEqual('new-id');
    });
    test('passes existing config out to config function', () => {
      // Create a new config key based on the value of an existing one
      (0, _config.configure)(existingConfig => ({
        testIdAttribute: `${existingConfig.testIdAttribute}-derived`
      }));
      const conf = (0, _config.getConfig)(); // The new value should be there, and existing values should be
      // untouched

      expect(conf).toMatchObject({
        testIdAttribute: 'data-testid-derived'
      });
    });
  });
});