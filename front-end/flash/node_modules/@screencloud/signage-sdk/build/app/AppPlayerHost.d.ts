import { IBridge, MessageApp } from "@screencloud/app-core";
import { AppMessages, AppPlayerMessages } from "../messages";
import { IAppPlayerHostMessageHandlers } from "./types";
export interface IAppPlayerHost {
    isConnected: boolean;
    emitFinish(): void;
    emitInitialize(payload: AppPlayerMessages.Initialize.Payload): void;
    emitStateUpdated(payload: AppPlayerMessages.StateUpdated.Payload): void;
    emitStart(): void;
    onInitialized(handler: AppMessages.Initialized.Handler): this;
    onPreloaded(handler: AppMessages.Preloaded.Handler): this;
    onStarted(handler: AppMessages.Started.Handler): this;
    onShowing(handler: AppMessages.Showing.Handler): this;
    onFinishing(handler: AppMessages.Finishing.Handler): this;
    onFinished(handler: AppMessages.Finished.Handler): this;
    onLog(handler: AppMessages.Log.Handler): this;
    onRequestAuthToken(handler: AppMessages.RequestAuthToken.Handler): this;
    disconnect(): void;
}
export declare class AppPlayerHost extends MessageApp implements IAppPlayerHost {
    constructor(handlers?: IAppPlayerHostMessageHandlers, bridge?: IBridge);
    connect(): Promise<void>;
    emitInitialize(payload: AppPlayerMessages.Initialize.Payload): void;
    emitStart(): void;
    emitStateUpdated(payload: AppPlayerMessages.StateUpdated.Payload): void;
    emitFinish(): void;
    onInitialized(handler: AppMessages.Initialized.Handler): this;
    onPreloaded(handler: AppMessages.Preloaded.Handler): this;
    onStarted(handler: AppMessages.Started.Handler): this;
    onShowing(handler: AppMessages.Showing.Handler): this;
    onFinishing(handler: AppMessages.Finishing.Handler): this;
    onFinished(handler: AppMessages.Finished.Handler): this;
    onLog(handler: AppMessages.Log.Handler): this;
    onRequestAuthToken(handler: AppMessages.RequestAuthToken.Handler): this;
}
