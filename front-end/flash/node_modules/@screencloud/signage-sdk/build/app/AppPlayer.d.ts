import { IBridge, MessageApp } from "@screencloud/app-core";
import { AppMessages, AppPlayerMessages } from "../messages";
import { IAppPlayerMessageHandlers } from "./types";
export interface IAppPlayer {
    onFinish(handler: AppPlayerMessages.Finish.Handler): this;
    onInitialize(handler: AppPlayerMessages.Initialize.Handler): this;
    onStateUpdated(handler: AppPlayerMessages.StateUpdated.Handler): this;
    onStart(handler: AppPlayerMessages.Start.Handler): this;
    emitInitialized(): void;
    emitPreloaded(): void;
    emitStarted(): void;
    emitShowing(payload: AppMessages.Showing.Payload): void;
    emitFinishing(payload?: AppMessages.Finishing.Payload): void;
    emitFinished(payload?: AppMessages.Finished.Payload): void;
    emitLog(payload: AppMessages.Log.Payload): void;
    requestAuthToken(payload: AppMessages.RequestAuthToken.Payload): Promise<AppMessages.RequestAuthToken.Response>;
}
export declare class AppPlayer extends MessageApp implements IAppPlayer {
    constructor(handlers?: IAppPlayerMessageHandlers, bridge?: IBridge);
    connect(): Promise<void>;
    emitFinished(payload?: AppMessages.Finished.Payload): void;
    emitLog(payload: AppMessages.Log.Payload): void;
    emitFinishing(payload?: AppMessages.Finishing.Payload): void;
    emitInitialized(): void;
    emitPreloaded(): void;
    emitShowing(payload: AppMessages.Showing.Payload): void;
    emitStarted(): void;
    onInitialize(handler: AppPlayerMessages.Initialize.Handler): this;
    onStart(handler: AppPlayerMessages.Start.Handler): this;
    onStateUpdated(handler: AppPlayerMessages.StateUpdated.Handler): this;
    onFinish(handler: (payload: AppPlayerMessages.Finish.Payload) => void): this;
    requestAuthToken(payload: AppMessages.RequestAuthToken.Payload): Promise<AppMessages.RequestAuthToken.Response>;
}
