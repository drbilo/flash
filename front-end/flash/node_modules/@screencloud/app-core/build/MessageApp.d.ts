import { IBridge, IBridgeOptions } from "./Bridge";
import { Arrayfied } from "./utils";
export interface IMessage<Payload = any, Type = any, Meta = any> {
    type: Type;
    payload?: Payload;
    meta?: Meta;
}
export interface IMessageHandlers {
    [index: string]: (payload: void | any) => void;
}
export interface IMessageApp<MessageTypes = any> {
    readonly isConnected: boolean;
    readonly bridge: IBridge;
    emit<Message extends IMessage = IMessage>(message: IMessage): void;
    request<Message extends IMessage = IMessage, Result = any>(message: IMessage, overrideOptions?: Partial<IBridgeOptions>): Promise<Result>;
    on(messageType: string, handler: (payload: void | any) => void): this;
    off(handler: (payload: void | any) => void): this;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
}
export declare function isValidMessageTypeArray(obj: any): obj is string[];
export declare class MessageApp<MessageTypes = any, MessageHandlers extends IMessageHandlers = {}> implements IMessageApp<MessageTypes> {
    readonly isConnected: boolean;
    readonly bridge: IBridge;
    protected handlers: Partial<Arrayfied<MessageHandlers>>;
    constructor(handlers: Partial<MessageHandlers>, bridge: IBridge);
    on(messageType: string, handler: (payload: void | any) => void): this;
    off(handler: (payload: void | any) => void): this;
    connect(awaitConnection?: boolean): Promise<void>;
    disconnect(): Promise<void>;
    emit<Message extends IMessage>(message: Message): void;
    request<Message extends IMessage = any, Result = any>(message: Message, overrideOptions?: Partial<IBridgeOptions>): Promise<Result>;
    protected receive(message: IMessage): undefined | Promise<any>;
}
