"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var Bridge_1 = require("./Bridge");
var PostMessageBridgeCommandTypes;
(function (PostMessageBridgeCommandTypes) {
    PostMessageBridgeCommandTypes["Connect"] = "CONNECT";
    PostMessageBridgeCommandTypes["ConnectSuccess"] = "CONNECT_SUCCESS";
    PostMessageBridgeCommandTypes["Disconnect"] = "DISCONNECT";
})(PostMessageBridgeCommandTypes = exports.PostMessageBridgeCommandTypes || (exports.PostMessageBridgeCommandTypes = {}));
function tryDecodePostMessageBridgeCommand(obj) {
    if (!lodash_1.isString(obj) || !obj.startsWith("___")) {
        return undefined;
    }
    return JSON.parse(obj.substr(3));
}
exports.tryDecodePostMessageBridgeCommand = tryDecodePostMessageBridgeCommand;
function encodePostMessageBridgeCommand(type, data) {
    if (!type || !lodash_1.isString(type)) {
        throw new Error("command must be a string");
    }
    return "___" + JSON.stringify({ type: type, data: data });
}
exports.encodePostMessageBridgeCommand = encodePostMessageBridgeCommand;
var PostMessageBridge = /** @class */ (function (_super) {
    __extends(PostMessageBridge, _super);
    function PostMessageBridge(targetWindow, sourceWindow, timeout) {
        if (targetWindow === void 0) { targetWindow = window.opener || window.parent || window.top; }
        if (sourceWindow === void 0) { sourceWindow = window; }
        if (timeout === void 0) { timeout = 1000; }
        var _this = _super.call(this, {
            connect: function (awaitConnect) { return new Promise(function (resolve, reject) {
                _this.addListener();
                _this.resolveConnect = resolve;
                if (!awaitConnect) {
                    setTimeout(function () { return reject("timeout"); }, _this.options.timeout);
                    _this.sendCommand(PostMessageBridgeCommandTypes.Connect);
                }
            }); },
            disconnect: function () { return new Promise(function (resolve) {
                _this.removeListener();
                _this.sendCommand(PostMessageBridgeCommandTypes.Disconnect);
                resolve();
            }); },
            send: function (request) {
                _this.targetWindow.postMessage(request, "*");
            },
            timeout: timeout,
        }) || this;
        _this.targetWindow = targetWindow;
        _this.sourceWindow = sourceWindow;
        _this.eventListener = undefined;
        _this.resolveConnect = undefined;
        if (!_this.targetWindow || !_this.targetWindow.postMessage) {
            throw new Error("invalid argument targetWindow");
        }
        return _this;
    }
    PostMessageBridge.prototype.sendCommand = function (type, data) {
        this.options.send(encodePostMessageBridgeCommand(type, data));
    };
    PostMessageBridge.prototype.handleConnectCommand = function () {
        if (this.state === Bridge_1.BridgeState.AwaitingConnect && this.resolveConnect) {
            this.sendCommand(PostMessageBridgeCommandTypes.ConnectSuccess);
            this.resolveConnect();
        }
    };
    PostMessageBridge.prototype.handleConnectSuccessCommand = function () {
        if (this.state === Bridge_1.BridgeState.Connecting && this.resolveConnect) {
            this.resolveConnect();
        }
    };
    PostMessageBridge.prototype.receiveCommand = function (command) {
        var type = command.type;
        if (!type || !Object.values(PostMessageBridgeCommandTypes).includes(type)) {
            throw new Error("Unrecognized command received: \"" + type + "\"");
        }
        if (type === PostMessageBridgeCommandTypes.Connect) {
            this.handleConnectCommand();
        }
        else if (type === PostMessageBridgeCommandTypes.ConnectSuccess) {
            this.handleConnectSuccessCommand();
        }
        else if (type === PostMessageBridgeCommandTypes.Disconnect) {
            this.handleDisconnect();
        }
    };
    PostMessageBridge.prototype.handleMessageEvent = function (event) {
        // source is unexpected?
        if (event.source !== this.targetWindow) {
            return;
        }
        var data = event.data;
        var command = tryDecodePostMessageBridgeCommand(data);
        if (command) {
            this.receiveCommand(command);
        }
        else {
            this.receive(data);
        }
    };
    PostMessageBridge.prototype.addListener = function () {
        var _this = this;
        if (!this.eventListener) {
            this.sourceWindow.addEventListener("message", this.eventListener = function (event) { return _this.handleMessageEvent(event); });
        }
    };
    PostMessageBridge.prototype.removeListener = function () {
        if (this.eventListener) {
            this.sourceWindow.removeEventListener("message", this.eventListener);
            this.eventListener = undefined;
        }
    };
    return PostMessageBridge;
}(Bridge_1.Bridge));
exports.PostMessageBridge = PostMessageBridge;
//# sourceMappingURL=PostMessageBridge.js.map