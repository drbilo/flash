import { Bridge } from "./Bridge";
export declare enum PostMessageBridgeCommandTypes {
    Connect = "CONNECT",
    ConnectSuccess = "CONNECT_SUCCESS",
    Disconnect = "DISCONNECT"
}
export interface IPostMessageBridgeCommand<T = never> {
    type: PostMessageBridgeCommandTypes;
    data: T;
}
export declare function tryDecodePostMessageBridgeCommand(obj: any): undefined | IPostMessageBridgeCommand;
export declare function encodePostMessageBridgeCommand(type: PostMessageBridgeCommandTypes, data?: any): string;
export declare class PostMessageBridge extends Bridge {
    protected targetWindow: Window;
    protected sourceWindow: Window;
    protected eventListener?: EventListenerOrEventListenerObject;
    protected resolveConnect?: () => void;
    constructor(targetWindow?: Window, sourceWindow?: Window, timeout?: number);
    protected sendCommand(type: PostMessageBridgeCommandTypes, data?: any): void;
    protected handleConnectCommand(): void;
    protected handleConnectSuccessCommand(): void;
    protected receiveCommand(command: IPostMessageBridgeCommand): void;
    protected handleMessageEvent(event: MessageEvent): void;
    protected addListener(): void;
    protected removeListener(): void;
}
